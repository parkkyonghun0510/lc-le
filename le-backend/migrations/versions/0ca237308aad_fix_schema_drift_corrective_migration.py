"""fix_schema_drift_corrective_migration

Revision ID: 0ca237308aad
Revises: a8e596d25ea1
Create Date: 2025-10-06 20:08:10.738837

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0ca237308aad'
down_revision = 'a8e596d25ea1'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('customer_applications', 'requested_amount',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Initial requested amount (consolidated from loan_amount)',
               existing_nullable=True)
    op.alter_column('customer_applications', 'loan_purposes',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Multiple loan purposes as JSON array',
               existing_nullable=True)
    op.alter_column('customer_applications', 'purpose_details',
               existing_type=sa.TEXT(),
               comment='Detailed description of loan purposes',
               existing_nullable=True)
    op.alter_column('customer_applications', 'product_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Type of loan product',
               existing_nullable=True)
    op.alter_column('customer_applications', 'desired_loan_term',
               existing_type=sa.INTEGER(),
               comment='Requested loan term in months',
               existing_nullable=True)
    op.alter_column('customer_applications', 'requested_disbursement_date',
               existing_type=sa.DATE(),
               comment='When customer wants the loan disbursed',
               existing_nullable=True)
    op.alter_column('customer_applications', 'interest_rate',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment='Annual percentage rate',
               existing_nullable=True)
    op.alter_column('customer_applications', 'loan_status',
               existing_type=sa.VARCHAR(length=20),
               comment='Current status of the loan application',
               existing_nullable=True)
    op.alter_column('customer_applications', 'loan_purpose',
               existing_type=sa.VARCHAR(length=255),
               comment='Primary loan purpose description',
               existing_nullable=True)
    op.drop_index(op.f('ix_customer_applications_date_range'), table_name='customer_applications')
    op.drop_index(op.f('ix_customer_applications_identification'), table_name='customer_applications')
    op.drop_index(op.f('ix_customer_applications_status'), table_name='customer_applications')
    op.drop_constraint(op.f('uq_customer_identification'), 'customer_applications', type_='unique')
    op.drop_column('customer_applications', 'loan_amount')
    op.drop_index(op.f('ix_files_path'), table_name='files')
    op.drop_constraint(op.f('uq_file_paths'), 'files', type_='unique')
    op.alter_column('users', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               comment='Soft delete flag',
               existing_nullable=True)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When user was soft deleted',
               existing_nullable=True)
    op.alter_column('users', 'deleted_by',
               existing_type=sa.UUID(),
               comment='User who performed the soft delete',
               existing_nullable=True)
    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index(op.f('ix_users_status'), table_name='users', postgresql_where='(is_deleted = false)')
    op.drop_constraint(op.f('fk_users_deleted_by'), 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'users', ['deleted_by'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key(op.f('fk_users_deleted_by'), 'users', 'users', ['deleted_by'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('ix_users_status'), 'users', ['status'], unique=False, postgresql_where='(is_deleted = false)')
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_users_deleted_at'), 'users', ['deleted_at'], unique=False)
    op.alter_column('users', 'deleted_by',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='User who performed the soft delete',
               existing_nullable=True)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='When user was soft deleted',
               existing_nullable=True)
    op.alter_column('users', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               comment=None,
               existing_comment='Soft delete flag',
               existing_nullable=True)
    op.create_unique_constraint(op.f('uq_file_paths'), 'files', ['file_path'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_files_path'), 'files', ['file_path'], unique=False)
    op.add_column('customer_applications', sa.Column('loan_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True))
    op.create_unique_constraint(op.f('uq_customer_identification'), 'customer_applications', ['id_card_type', 'id_number'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_customer_applications_status'), 'customer_applications', ['status'], unique=False)
    op.create_index(op.f('ix_customer_applications_identification'), 'customer_applications', ['id_card_type', 'id_number'], unique=False)
    op.create_index(op.f('ix_customer_applications_date_range'), 'customer_applications', ['loan_start_date', 'loan_end_date'], unique=False)
    op.alter_column('customer_applications', 'loan_purpose',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Primary loan purpose description',
               existing_nullable=True)
    op.alter_column('customer_applications', 'loan_status',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='Current status of the loan application',
               existing_nullable=True)
    op.alter_column('customer_applications', 'interest_rate',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment=None,
               existing_comment='Annual percentage rate',
               existing_nullable=True)
    op.alter_column('customer_applications', 'requested_disbursement_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='When customer wants the loan disbursed',
               existing_nullable=True)
    op.alter_column('customer_applications', 'desired_loan_term',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Requested loan term in months',
               existing_nullable=True)
    op.alter_column('customer_applications', 'product_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Type of loan product',
               existing_nullable=True)
    op.alter_column('customer_applications', 'purpose_details',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Detailed description of loan purposes',
               existing_nullable=True)
    op.alter_column('customer_applications', 'loan_purposes',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='Multiple loan purposes as JSON array',
               existing_nullable=True)
    op.alter_column('customer_applications', 'requested_amount',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment=None,
               existing_comment='Initial requested amount (consolidated from loan_amount)',
               existing_nullable=True)
    # ### end Alembic commands ###