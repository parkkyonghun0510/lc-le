"""Add workflow status fields and account_id validation

Revision ID: 219bd60709b9
Revises: e29d620a66d0
Create Date: 2025-09-09 15:48:09.652020

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '219bd60709b9'
down_revision = 'e29d620a66d0'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('audit_logs', sa.Column('details', sa.JSON(), nullable=True))
    op.add_column('audit_logs', sa.Column('timestamp', sa.DateTime(), nullable=False))
    # Check if enum type exists and create if not
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE auditeventtype AS ENUM ('CREATE', 'UPDATE', 'DELETE', 'LOGIN', 'LOGOUT', 'VALIDATION', 'ACCESS', 'ERROR', 'SECURITY');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    # Convert the column using USING clause
    op.execute("ALTER TABLE audit_logs ALTER COLUMN event_type TYPE auditeventtype USING event_type::auditeventtype")
    op.drop_index('idx_audit_logs_created_at', table_name='audit_logs')
    op.drop_index('idx_audit_logs_entity', table_name='audit_logs')
    op.drop_index('idx_audit_logs_event_type', table_name='audit_logs')
    op.drop_index('idx_audit_logs_field_name', table_name='audit_logs')
    op.drop_index('idx_audit_logs_ip_address', table_name='audit_logs')
    op.drop_index('idx_audit_logs_user_id', table_name='audit_logs')
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_entity_id'), 'audit_logs', ['entity_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_entity_type'), 'audit_logs', ['entity_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_event_type'), 'audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_ip_address'), 'audit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.drop_column('audit_logs', 'request_id')
    op.drop_column('audit_logs', 'field_value')
    op.drop_column('audit_logs', 'created_at')
    op.drop_column('audit_logs', 'new_value')
    op.drop_column('audit_logs', 'metadata')
    op.drop_column('audit_logs', 'error_message')
    op.drop_column('audit_logs', 'severity')
    op.drop_column('audit_logs', 'success')
    op.drop_column('audit_logs', 'session_id')
    op.drop_column('audit_logs', 'field_name')
    op.drop_column('audit_logs', 'old_value')
    op.add_column('customer_applications', sa.Column('workflow_status', sa.String(length=50), nullable=True))
    op.add_column('customer_applications', sa.Column('po_created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('customer_applications', sa.Column('po_created_by', sa.UUID(), nullable=True))
    op.add_column('customer_applications', sa.Column('user_completed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('customer_applications', sa.Column('user_completed_by', sa.UUID(), nullable=True))
    op.add_column('customer_applications', sa.Column('teller_processed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('customer_applications', sa.Column('teller_processed_by', sa.UUID(), nullable=True))
    op.add_column('customer_applications', sa.Column('manager_reviewed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('customer_applications', sa.Column('manager_reviewed_by', sa.UUID(), nullable=True))
    op.add_column('customer_applications', sa.Column('account_id_validated', sa.Boolean(), nullable=True))
    op.add_column('customer_applications', sa.Column('account_id_validation_notes', sa.Text(), nullable=True))
    # Convert desired_loan_term from VARCHAR to INTEGER with proper casting
    op.execute("ALTER TABLE customer_applications ALTER COLUMN desired_loan_term TYPE INTEGER USING CASE WHEN desired_loan_term ~ '^[0-9]+$' THEN desired_loan_term::integer ELSE NULL END")
    op.drop_index('ix_customer_applications_full_name_latin', table_name='customer_applications')
    op.drop_index('ix_customer_applications_guarantor_id_number', table_name='customer_applications')
    op.drop_index('ix_customer_applications_id_number', table_name='customer_applications')
    op.drop_index('ix_customer_applications_phone', table_name='customer_applications')
    op.drop_constraint('uq_customer_applications_id_number_type', 'customer_applications', type_='unique')
    op.drop_constraint('uq_customer_applications_phone', 'customer_applications', type_='unique')
    op.create_foreign_key(None, 'customer_applications', 'users', ['manager_reviewed_by'], ['id'])
    op.create_foreign_key(None, 'customer_applications', 'users', ['user_completed_by'], ['id'])
    op.create_foreign_key(None, 'customer_applications', 'users', ['po_created_by'], ['id'])
    op.create_foreign_key(None, 'customer_applications', 'users', ['teller_processed_by'], ['id'])
    op.drop_column('customer_applications', 'loan_term_frequency')
    op.drop_column('customer_applications', 'loan_term_duration')
    op.drop_index('ix_users_employee_id', table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_users_employee_id', 'users', ['employee_id'], unique=False)
    op.add_column('customer_applications', sa.Column('loan_term_duration', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('customer_applications', sa.Column('loan_term_frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'customer_applications', type_='foreignkey')
    op.drop_constraint(None, 'customer_applications', type_='foreignkey')
    op.drop_constraint(None, 'customer_applications', type_='foreignkey')
    op.drop_constraint(None, 'customer_applications', type_='foreignkey')
    op.create_unique_constraint('uq_customer_applications_phone', 'customer_applications', ['phone'])
    op.create_unique_constraint('uq_customer_applications_id_number_type', 'customer_applications', ['id_number', 'id_card_type'])
    op.create_index('ix_customer_applications_phone', 'customer_applications', ['phone'], unique=False)
    op.create_index('ix_customer_applications_id_number', 'customer_applications', ['id_number'], unique=False)
    op.create_index('ix_customer_applications_guarantor_id_number', 'customer_applications', ['guarantor_id_number'], unique=False)
    op.create_index('ix_customer_applications_full_name_latin', 'customer_applications', ['full_name_latin'], unique=False)
    # Convert desired_loan_term back to VARCHAR
    op.execute("ALTER TABLE customer_applications ALTER COLUMN desired_loan_term TYPE VARCHAR(50) USING desired_loan_term::text")
    op.drop_column('customer_applications', 'account_id_validation_notes')
    op.drop_column('customer_applications', 'account_id_validated')
    op.drop_column('customer_applications', 'manager_reviewed_by')
    op.drop_column('customer_applications', 'manager_reviewed_at')
    op.drop_column('customer_applications', 'teller_processed_by')
    op.drop_column('customer_applications', 'teller_processed_at')
    op.drop_column('customer_applications', 'user_completed_by')
    op.drop_column('customer_applications', 'user_completed_at')
    op.drop_column('customer_applications', 'po_created_by')
    op.drop_column('customer_applications', 'po_created_at')
    op.drop_column('customer_applications', 'workflow_status')
    op.add_column('audit_logs', sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('field_value', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('request_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_ip_address'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_entity_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_entity_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.create_index('idx_audit_logs_user_id', 'audit_logs', ['user_id'], unique=False)
    op.create_index('idx_audit_logs_ip_address', 'audit_logs', ['ip_address'], unique=False)
    op.create_index('idx_audit_logs_field_name', 'audit_logs', ['field_name'], unique=False)
    op.create_index('idx_audit_logs_event_type', 'audit_logs', ['event_type'], unique=False)
    op.create_index('idx_audit_logs_entity', 'audit_logs', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_audit_logs_created_at', 'audit_logs', ['created_at'], unique=False)
    # Convert back to VARCHAR
    op.execute("ALTER TABLE audit_logs ALTER COLUMN event_type TYPE VARCHAR(50) USING event_type::text")
    # Drop the enum type
    op.execute("DROP TYPE IF EXISTS auditeventtype")
    op.drop_column('audit_logs', 'timestamp')
    op.drop_column('audit_logs', 'details')
    # ### end Alembic commands ###