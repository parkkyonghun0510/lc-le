"""enhance_user_status_management

Revision ID: 40aa48a7ff86
Revises: 4e3a0d3ed7ff
Create Date: 2025-09-26 20:31:11.309208

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '40aa48a7ff86'
down_revision = '4e3a0d3ed7ff'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_activities_activity_type'), table_name='user_activities')
    op.drop_index(op.f('ix_user_activities_created_at'), table_name='user_activities')
    op.drop_index(op.f('ix_user_activities_user_created'), table_name='user_activities')
    op.drop_index(op.f('ix_user_activities_user_id'), table_name='user_activities')
    op.drop_table('user_activities')
    op.drop_table('folder_backup_20250120')
    op.drop_index(op.f('ix_bulk_operations_created_at'), table_name='bulk_operations')
    op.drop_index(op.f('ix_bulk_operations_operation_type'), table_name='bulk_operations')
    op.drop_index(op.f('ix_bulk_operations_performed_by'), table_name='bulk_operations')
    op.drop_index(op.f('ix_bulk_operations_status'), table_name='bulk_operations')
    op.drop_table('bulk_operations')
    op.drop_index(op.f('ix_user_status_history_changed_at'), table_name='user_status_history')
    op.drop_index(op.f('ix_user_status_history_changed_by'), table_name='user_status_history')
    op.drop_index(op.f('ix_user_status_history_new_status'), table_name='user_status_history')
    op.drop_index(op.f('ix_user_status_history_user_id'), table_name='user_status_history')
    op.drop_table('user_status_history')
    op.drop_table('file_backup_20250120')
    op.drop_index(op.f('ix_notifications_created_at'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_read'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_type'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_user_unread'), table_name='notifications')
    op.drop_table('notifications')
    op.alter_column('audit_logs', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('customer_applications', 'sex',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='Gender: male, female, other',
               existing_nullable=True)
    op.alter_column('customer_applications', 'marital_status',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='Marital status: single, married, divorced, widowed, separated',
               existing_nullable=True)
    op.drop_index(op.f('idx_files_folder_application'), table_name='files')
    op.drop_index(op.f('idx_folders_application_id'), table_name='folders')
    op.drop_index(op.f('idx_folders_application_parent'), table_name='folders')
    op.drop_index(op.f('idx_folders_parent_name'), table_name='folders')
    op.drop_index(op.f('idx_unique_application_parent_folder'), table_name='folders', postgresql_where='((parent_id IS NULL) AND (application_id IS NOT NULL))')
    op.drop_index(op.f('idx_unique_child_folder_name'), table_name='folders', postgresql_where='(parent_id IS NOT NULL)')
    op.add_column('users', sa.Column('status_changed_at', sa.DateTime(timezone=True), nullable=True, comment='When status was last changed'))
    op.add_column('users', sa.Column('status_changed_by', sa.UUID(), nullable=True, comment='User who changed the status'))
    op.alter_column('users', 'status_reason',
               existing_type=sa.VARCHAR(length=100),
               comment='Reason for current status',
               existing_nullable=True)
    op.alter_column('users', 'last_activity_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last recorded user activity',
               existing_nullable=True)
    op.alter_column('users', 'login_count',
               existing_type=sa.INTEGER(),
               server_default=None,
               comment='Total number of logins',
               existing_nullable=True)
    op.alter_column('users', 'failed_login_attempts',
               existing_type=sa.INTEGER(),
               server_default=None,
               comment='Consecutive failed login attempts',
               existing_nullable=True)
    op.alter_column('users', 'onboarding_completed',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               comment='Whether user onboarding is complete',
               existing_nullable=True)
    op.alter_column('users', 'onboarding_completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When onboarding was completed',
               existing_nullable=True)
    op.drop_index(op.f('ix_users_last_activity_at'), table_name='users')
    op.drop_index(op.f('ix_users_line_manager_id'), table_name='users')
    op.drop_index(op.f('ix_users_onboarding_completed'), table_name='users')
    op.drop_index(op.f('ix_users_portfolio_id'), table_name='users')
    op.drop_index(op.f('ix_users_status'), table_name='users')
    op.drop_index(op.f('ix_users_status_activity'), table_name='users')
    op.drop_constraint(op.f('fk_users_portfolio_id'), 'users', type_='foreignkey')
    op.drop_constraint(op.f('fk_users_line_manager_id'), 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'users', ['portfolio_id'], ['id'])
    op.create_foreign_key(None, 'users', 'users', ['line_manager_id'], ['id'])
    op.create_foreign_key(None, 'users', 'users', ['status_changed_by'], ['id'])
    op.drop_column('users', 'ui_preferences')
    op.drop_column('users', 'offboarding_completed_at')
    op.drop_column('users', 'offboarding_initiated_at')
    op.drop_column('users', 'notification_preferences')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('notification_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('offboarding_initiated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('offboarding_completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('ui_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key(op.f('fk_users_line_manager_id'), 'users', 'users', ['line_manager_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_users_portfolio_id'), 'users', 'users', ['portfolio_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('ix_users_status_activity'), 'users', ['status', 'last_activity_at'], unique=False)
    op.create_index(op.f('ix_users_status'), 'users', ['status'], unique=False)
    op.create_index(op.f('ix_users_portfolio_id'), 'users', ['portfolio_id'], unique=False)
    op.create_index(op.f('ix_users_onboarding_completed'), 'users', ['onboarding_completed'], unique=False)
    op.create_index(op.f('ix_users_line_manager_id'), 'users', ['line_manager_id'], unique=False)
    op.create_index(op.f('ix_users_last_activity_at'), 'users', ['last_activity_at'], unique=False)
    op.alter_column('users', 'onboarding_completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='When onboarding was completed',
               existing_nullable=True)
    op.alter_column('users', 'onboarding_completed',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               comment=None,
               existing_comment='Whether user onboarding is complete',
               existing_nullable=True)
    op.alter_column('users', 'failed_login_attempts',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               comment=None,
               existing_comment='Consecutive failed login attempts',
               existing_nullable=True)
    op.alter_column('users', 'login_count',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               comment=None,
               existing_comment='Total number of logins',
               existing_nullable=True)
    op.alter_column('users', 'last_activity_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Last recorded user activity',
               existing_nullable=True)
    op.alter_column('users', 'status_reason',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Reason for current status',
               existing_nullable=True)
    op.drop_column('users', 'status_changed_by')
    op.drop_column('users', 'status_changed_at')
    op.create_index(op.f('idx_unique_child_folder_name'), 'folders', ['parent_id', 'name', 'application_id'], unique=True, postgresql_where='(parent_id IS NOT NULL)')
    op.create_index(op.f('idx_unique_application_parent_folder'), 'folders', ['application_id'], unique=True, postgresql_where='((parent_id IS NULL) AND (application_id IS NOT NULL))')
    op.create_index(op.f('idx_folders_parent_name'), 'folders', ['parent_id', 'name'], unique=False)
    op.create_index(op.f('idx_folders_application_parent'), 'folders', ['application_id', 'parent_id'], unique=False)
    op.create_index(op.f('idx_folders_application_id'), 'folders', ['application_id'], unique=False)
    op.create_index(op.f('idx_files_folder_application'), 'files', ['folder_id', 'application_id'], unique=False)
    op.alter_column('customer_applications', 'marital_status',
               existing_type=sa.VARCHAR(length=20),
               comment='Marital status: single, married, divorced, widowed, separated',
               existing_nullable=True)
    op.alter_column('customer_applications', 'sex',
               existing_type=sa.VARCHAR(length=20),
               comment='Gender: male, female, other',
               existing_nullable=True)
    op.alter_column('audit_logs', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               server_default=None,
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_dismissed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dismissed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_index(op.f('ix_notifications_user_unread'), 'notifications', ['user_id', 'is_read'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_index(op.f('ix_notifications_type'), 'notifications', ['type'], unique=False)
    op.create_index(op.f('ix_notifications_is_read'), 'notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_notifications_created_at'), 'notifications', ['created_at'], unique=False)
    op.create_table('file_backup_20250120',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('application_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('folder_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True)
    )
    op.create_table('user_status_history',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('old_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('new_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('reason_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('reason_comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('effective_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], name=op.f('user_status_history_changed_by_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_status_history_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_status_history_pkey'))
    )
    op.create_index(op.f('ix_user_status_history_user_id'), 'user_status_history', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_status_history_new_status'), 'user_status_history', ['new_status'], unique=False)
    op.create_index(op.f('ix_user_status_history_changed_by'), 'user_status_history', ['changed_by'], unique=False)
    op.create_index(op.f('ix_user_status_history_changed_at'), 'user_status_history', ['changed_at'], unique=False)
    op.create_table('bulk_operations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_criteria', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('changes_applied', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('successful_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estimated_completion', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['performed_by'], ['users.id'], name=op.f('bulk_operations_performed_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('bulk_operations_pkey'))
    )
    op.create_index(op.f('ix_bulk_operations_status'), 'bulk_operations', ['status'], unique=False)
    op.create_index(op.f('ix_bulk_operations_performed_by'), 'bulk_operations', ['performed_by'], unique=False)
    op.create_index(op.f('ix_bulk_operations_operation_type'), 'bulk_operations', ['operation_type'], unique=False)
    op.create_index(op.f('ix_bulk_operations_created_at'), 'bulk_operations', ['created_at'], unique=False)
    op.create_table('folder_backup_20250120',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('application_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('user_activities',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('activity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_activities_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_activities_pkey'))
    )
    op.create_index(op.f('ix_user_activities_user_id'), 'user_activities', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_activities_user_created'), 'user_activities', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_user_activities_created_at'), 'user_activities', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_activities_activity_type'), 'user_activities', ['activity_type'], unique=False)
    # ### end Alembic commands ###